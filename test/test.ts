import * as cxml from 'cxml';
import * as geo from 'geobabel';
import { Parser, GeometryToken } from '..';

const geometry = geo.Geometry.fromWKB(new Buffer('010700000008000000010100000000000000000028400000000000004140010200000002000000000000000000284000000000000041400000000000004c40000000000080534001030000000200000004000000000000000000284000000000000041400000000000004c4000000000008053400000000000805640000000000080564000000000000028400000000000004140040000000000000000c05540000000000040504000000000008045400000000000003540000000000000000000000000000000000000000000c05540000000000040504001040000000200000001010000000000000000002840000000000000414001010000000000000000004c400000000000805340010500000002000000010200000002000000000000000000284000000000000041400000000000004c4000000000008053400102000000020000000000000000c0554000000000004050400000000000804540000000000000354001060000000100000001030000000200000004000000000000000000284000000000000041400000000000004c4000000000008053400000000000805640000000000080564000000000000028400000000000004140040000000000000000c05540000000000040504000000000008045400000000000003540000000000000000000000000000000000000000000c055400000000000405040010b00000001000000010200000002000000000000000000284000000000000041400000000000004c400000000000805340010c0000000100000001030000000200000004000000000000000000284000000000000041400000000000004c4000000000008053400000000000805640000000000080564000000000000028400000000000004140040000000000000000c05540000000000040504000000000008045400000000000003540000000000000000000000000000000000000000000c055400000000000405040', 'hex'));

const config = new Parser(GeometryToken).config;
const writer = new cxml.Writer(config);

writer.pipe(process.stdout);

const namespaceList: (cxml.Namespace | undefined)[] = [];

for(let ns of config.namespaceList) {
	if(ns) namespaceList[ns.base.id] = ns.base;
}

writer.write([ new cxml.NamespaceToken(namespaceList) ]);
writer.write(geometry.writeGML(config));

writer.end();
